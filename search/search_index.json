{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Analysis Correlation Engine - Alert Management System \u00b6 ACE2 is comprised of the Core and the Alert Management System. The AMS provides a web interface for analysts to interact with the alerts. Quick Start \u00b6 The AMS comes with a Docker-Compose file to quickly deploy the application in development mode, which includes hot-reloading for both the frontend and backend API: bin/reset-dev-container.sh After the containers are built and running, you can access the components using the following URLs: Frontend: http://localhost:8080 Backend API Swagger documentation: http://localhost:7777/docs Backend API ReDoc documentation: http://localhost:7777/redoc Philosophy \u00b6 For a more in-depth understanding of the philosophy behind ACE, see the talk that John Davison gave on the development of the ACE tool set at BSides Cincinnati in 2015.","title":"Analysis Correlation Engine - Alert Management System"},{"location":"#analysis-correlation-engine-alert-management-system","text":"ACE2 is comprised of the Core and the Alert Management System. The AMS provides a web interface for analysts to interact with the alerts.","title":"Analysis Correlation Engine - Alert Management System"},{"location":"#quick-start","text":"The AMS comes with a Docker-Compose file to quickly deploy the application in development mode, which includes hot-reloading for both the frontend and backend API: bin/reset-dev-container.sh After the containers are built and running, you can access the components using the following URLs: Frontend: http://localhost:8080 Backend API Swagger documentation: http://localhost:7777/docs Backend API ReDoc documentation: http://localhost:7777/redoc","title":"Quick Start"},{"location":"#philosophy","text":"For a more in-depth understanding of the philosophy behind ACE, see the talk that John Davison gave on the development of the ACE tool set at BSides Cincinnati in 2015.","title":"Philosophy"},{"location":"development/","text":"ACE2 AMS Development Guide \u00b6 Initial setup \u00b6 This project has VSCode devcontainer support to ensure that anyone working on the project does so in a consistent environment as well as follows the same formatting/styling guidelines. Required setup \u00b6 In order to work within the devcontainer, you will need the following installed on your system: Docker VSCode Remote Development VSCode extension pack NOTE: If you are developing in Windows, you will need to make sure that you have WSL 2 set up and properly configured with Docker. That is outside the scope of this documentation, but you can find steps here . Working in the VSCode devcontainer \u00b6 When you open the project in VSCode, it will detect the devcontainer configuration and prompt you to reopen it inside of the container: Once you choose the Reopen in Container option, VSCode will work on building the environment. Once it is complete, you can open a terminal within VSCode to interact with the application: Any work done on the application should be done through the devcontainer. If you make a change to the devcontainer configuration (found in the .devcontainer directory), you can rebuild the devcontainer by clicking on Dev Container: ACE2 AMS in the lower-left corner of VSCode and then selecting the Rebuild Container option in the menu that opens. Starting the application \u00b6 You can start the application using Docker containers so that it uses hot-reloading anytime you change a file: bin/reset-dev-container.sh This script will generate random passwords for the database user and the secret key used for JWTs. If you need to access these, you can view them in the $HOME/.ace2.env file, which configures the environment variables that will be loaded into the database container. Once the both the frontend and backend development environments are built and started, you can access the components: Frontend: http://localhost:8080 Backend API Swagger documentation: http://localhost:7777/docs Backend API ReDoc documentation: http://localhost:7777/redoc Managing NPM packages \u00b6 You should not directly edit the dependencies or devDependencies inside of package.json or anything in package-lock.json . Any changes to packages should be performed via the npm command : Install new dependency package \u00b6 You would install a package like this if it is something the final compiled application needs: npm install <package> Install new dev dependency package \u00b6 You would install a package like this if it is only needed during development: npm install -D <package> Uninstall package \u00b6 You can uninstall/remove a package regardless of how it was installed by: npm uninstall <package> Running tests \u00b6 Backend \u00b6 The backend API has a suite of tests performed by Pytest that includes code coverage: bin/test-backend.sh You can run a specific portion of the tests using the same script: bin/test-backend.sh backend/app/tests/api/test_auth_validate.py Frontend \u00b6 This frontend has a suite of unit tests performed by Jest and end-to-end tests performed by Cypress . Unit tests \u00b6 You can execute the unit tests by running: bin/test-frontend-unit.sh End-to-end tests \u00b6 You can execute the end-to-end tests by running: bin/test-frontend-e2e.sh Test Runner \u00b6 Cypress also comes with an amazing Test Runner that lets you see and interact with the tests in your local web browser. This can be helpful when writing end-to-end tests to ensure they are working properly as well as any debugging you might need to do. However, this will need to be performed on your local system ouside of the containers. To do this, you will need to have Node.js 16 installed. Step 1: Install Node packages on your system (this only needs to be done one time): cd frontend/ npm install npx cypress install cd .. Step 2: Run the application if it isn't already running: bin/reset-dev-container.sh Step 3: Open the Test Runner: cd frontend/ npx cypress open For more information on what you can do with the Test Runner, view the Test Runner documentation .","title":"ACE2 AMS Development Guide"},{"location":"development/#ace2-ams-development-guide","text":"","title":"ACE2 AMS Development Guide"},{"location":"development/#initial-setup","text":"This project has VSCode devcontainer support to ensure that anyone working on the project does so in a consistent environment as well as follows the same formatting/styling guidelines.","title":"Initial setup"},{"location":"development/#required-setup","text":"In order to work within the devcontainer, you will need the following installed on your system: Docker VSCode Remote Development VSCode extension pack NOTE: If you are developing in Windows, you will need to make sure that you have WSL 2 set up and properly configured with Docker. That is outside the scope of this documentation, but you can find steps here .","title":"Required setup"},{"location":"development/#working-in-the-vscode-devcontainer","text":"When you open the project in VSCode, it will detect the devcontainer configuration and prompt you to reopen it inside of the container: Once you choose the Reopen in Container option, VSCode will work on building the environment. Once it is complete, you can open a terminal within VSCode to interact with the application: Any work done on the application should be done through the devcontainer. If you make a change to the devcontainer configuration (found in the .devcontainer directory), you can rebuild the devcontainer by clicking on Dev Container: ACE2 AMS in the lower-left corner of VSCode and then selecting the Rebuild Container option in the menu that opens.","title":"Working in the VSCode devcontainer"},{"location":"development/#starting-the-application","text":"You can start the application using Docker containers so that it uses hot-reloading anytime you change a file: bin/reset-dev-container.sh This script will generate random passwords for the database user and the secret key used for JWTs. If you need to access these, you can view them in the $HOME/.ace2.env file, which configures the environment variables that will be loaded into the database container. Once the both the frontend and backend development environments are built and started, you can access the components: Frontend: http://localhost:8080 Backend API Swagger documentation: http://localhost:7777/docs Backend API ReDoc documentation: http://localhost:7777/redoc","title":"Starting the application"},{"location":"development/#managing-npm-packages","text":"You should not directly edit the dependencies or devDependencies inside of package.json or anything in package-lock.json . Any changes to packages should be performed via the npm command :","title":"Managing NPM packages"},{"location":"development/#install-new-dependency-package","text":"You would install a package like this if it is something the final compiled application needs: npm install <package>","title":"Install new dependency package"},{"location":"development/#install-new-dev-dependency-package","text":"You would install a package like this if it is only needed during development: npm install -D <package>","title":"Install new dev dependency package"},{"location":"development/#uninstall-package","text":"You can uninstall/remove a package regardless of how it was installed by: npm uninstall <package>","title":"Uninstall package"},{"location":"development/#running-tests","text":"","title":"Running tests"},{"location":"development/#backend","text":"The backend API has a suite of tests performed by Pytest that includes code coverage: bin/test-backend.sh You can run a specific portion of the tests using the same script: bin/test-backend.sh backend/app/tests/api/test_auth_validate.py","title":"Backend"},{"location":"development/#frontend","text":"This frontend has a suite of unit tests performed by Jest and end-to-end tests performed by Cypress .","title":"Frontend"},{"location":"development/#unit-tests","text":"You can execute the unit tests by running: bin/test-frontend-unit.sh","title":"Unit tests"},{"location":"development/#end-to-end-tests","text":"You can execute the end-to-end tests by running: bin/test-frontend-e2e.sh","title":"End-to-end tests"},{"location":"development/#test-runner","text":"Cypress also comes with an amazing Test Runner that lets you see and interact with the tests in your local web browser. This can be helpful when writing end-to-end tests to ensure they are working properly as well as any debugging you might need to do. However, this will need to be performed on your local system ouside of the containers. To do this, you will need to have Node.js 16 installed. Step 1: Install Node packages on your system (this only needs to be done one time): cd frontend/ npm install npx cypress install cd .. Step 2: Run the application if it isn't already running: bin/reset-dev-container.sh Step 3: Open the Test Runner: cd frontend/ npx cypress open For more information on what you can do with the Test Runner, view the Test Runner documentation .","title":"Test Runner"},{"location":"development/backend/database/","text":"Database \u00b6 Schema definitions \u00b6 The database tables used by the FastAPI backend are all defined using SQLAlchemy. The table models are stored in backend/app/db/models.py . Alembic \u00b6 Creating revisions \u00b6 The models are applied to the database using Alembic . Whenever you make any changes to the database models, you will need to generate a new Alembic \"revision\". You can use the bin/db-revision.sh script to help create a new revision after you've made some changes to the database models: bin/db-revision.sh \"Some short note\" This script uses Alembic's \"autogenerate\" feature to create what it thinks is the correct database migration script for the changes you made. Autogenerate is not always perfect , so you should always verify the migration script it creates before committing it to the repo (and applying it in production) to make sure what will be applied to the database is correct. The migration scripts can be found in backend/db/migrations/versions/ . An example migration script for creating the \"tag\" database table is shown below: \"\"\"Initial revision Revision ID: 03fe4895893f Revises: Create Date: 2021-04-16 21:08:29.237142 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic revision = '03fe4895893f' down_revision = None branch_labels = None depends_on = None def upgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . create_table ( 'tag' , sa . Column ( 'id' , sa . Integer (), nullable = False ), sa . Column ( 'name' , sa . String (), nullable = True ), sa . PrimaryKeyConstraint ( 'id' ) ) op . create_index ( op . f ( 'ix_tag_id' ), 'tag' , [ 'id' ], unique = False ) # ### end Alembic commands ### def downgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . drop_index ( op . f ( 'ix_tag_id' ), table_name = 'tag' ) op . drop_table ( 'tag' ) # ### end Alembic commands ### This script shows you what it will do when you issue the \"upgrade\" command to the database as well as if you need to revert and issue the \"downgrade\" command. You can manually edit this migration script if something is incorrect. Applying revisions \u00b6 Once you have a new revision you'd like to apply to the database, you can either use the bin/reset-dev-container.sh script to rebuild your entire development environment (which will automatically apply the Alembic database revisions), or you can use the bin/db-upgrade.sh script to apply the revisions without erasing and rebuilding the development environment.","title":"Database"},{"location":"development/backend/database/#database","text":"","title":"Database"},{"location":"development/backend/database/#schema-definitions","text":"The database tables used by the FastAPI backend are all defined using SQLAlchemy. The table models are stored in backend/app/db/models.py .","title":"Schema definitions"},{"location":"development/backend/database/#alembic","text":"","title":"Alembic"},{"location":"development/backend/database/#creating-revisions","text":"The models are applied to the database using Alembic . Whenever you make any changes to the database models, you will need to generate a new Alembic \"revision\". You can use the bin/db-revision.sh script to help create a new revision after you've made some changes to the database models: bin/db-revision.sh \"Some short note\" This script uses Alembic's \"autogenerate\" feature to create what it thinks is the correct database migration script for the changes you made. Autogenerate is not always perfect , so you should always verify the migration script it creates before committing it to the repo (and applying it in production) to make sure what will be applied to the database is correct. The migration scripts can be found in backend/db/migrations/versions/ . An example migration script for creating the \"tag\" database table is shown below: \"\"\"Initial revision Revision ID: 03fe4895893f Revises: Create Date: 2021-04-16 21:08:29.237142 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic revision = '03fe4895893f' down_revision = None branch_labels = None depends_on = None def upgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . create_table ( 'tag' , sa . Column ( 'id' , sa . Integer (), nullable = False ), sa . Column ( 'name' , sa . String (), nullable = True ), sa . PrimaryKeyConstraint ( 'id' ) ) op . create_index ( op . f ( 'ix_tag_id' ), 'tag' , [ 'id' ], unique = False ) # ### end Alembic commands ### def downgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . drop_index ( op . f ( 'ix_tag_id' ), table_name = 'tag' ) op . drop_table ( 'tag' ) # ### end Alembic commands ### This script shows you what it will do when you issue the \"upgrade\" command to the database as well as if you need to revert and issue the \"downgrade\" command. You can manually edit this migration script if something is incorrect.","title":"Creating revisions"},{"location":"development/backend/database/#applying-revisions","text":"Once you have a new revision you'd like to apply to the database, you can either use the bin/reset-dev-container.sh script to rebuild your entire development environment (which will automatically apply the Alembic database revisions), or you can use the bin/db-upgrade.sh script to apply the revisions without erasing and rebuilding the development environment.","title":"Applying revisions"},{"location":"development/backend/environment_variables/","text":"Environment Variables \u00b6 The backend container relies on a number of environment variables. For the development environment, these are automatically generated by the bin/reset-dev-container.sh script and stored inside of the .ace2.env file inside of your home directory. These environment variables will need to be set by other means if you are running this application in production. FastAPI backend variables \u00b6 These variables are used by the FastAPI backend application. ACE_DEV : If set (to anything), the application will run in development-mode, which means that the Alembic database migrations will be applied and the database seeded with basic information automatically when the application starts. COOKIES_SAMESITE : The SameSite value to use when sending cookies. The development environment uses lax . Defaults to lax . COOKIES_SECURE : True/False whether or not you want to require HTTPS when sending cookies. The development environment uses False . Defaults to True . CORS_ORIGINS : A comma-separated string of origins to allow with CORS. For example, your development environment should be set to something like http://localhost:8080 depending on which port the GUI is served from. DATABASE_URL : The connection string used to connect to the PostgreSQL server. It should be in the form of postgresql://user:password@hostname[:port]/dbname . JWT_ACCESS_EXPIRE_SECONDS : The number of seconds after which an access token will expire. The development environment uses 900 (15 minutes) by default. JWT_ALGORITHM : Sets the algorithm to use for signing the tokens. The development environment uses HS256 by default. JWT_REFRESH_EXPIRE_SECONDS : The number of seconds after which a refresh token will expire. The development environment uses 43200 (12 hours) by default. JWT_SECRET : The secret key/password to use when signing and decoding tokens. The development environment generates a random 32 character string . PostgreSQL container variables \u00b6 These variables are used by the PostgreSQL server container to initialize the database. POSTGRES_DB : The name of the database to create. The development environment uses ace . POSTGRES_USER : The user to use to connect to the PostgreSQL server. The development environment uses ace . POSTGRES_PASSWORD : The password to use to connect to the PostgreSQL server. The development environment generates a random 32 character string .","title":"Environment Variables"},{"location":"development/backend/environment_variables/#environment-variables","text":"The backend container relies on a number of environment variables. For the development environment, these are automatically generated by the bin/reset-dev-container.sh script and stored inside of the .ace2.env file inside of your home directory. These environment variables will need to be set by other means if you are running this application in production.","title":"Environment Variables"},{"location":"development/backend/environment_variables/#fastapi-backend-variables","text":"These variables are used by the FastAPI backend application. ACE_DEV : If set (to anything), the application will run in development-mode, which means that the Alembic database migrations will be applied and the database seeded with basic information automatically when the application starts. COOKIES_SAMESITE : The SameSite value to use when sending cookies. The development environment uses lax . Defaults to lax . COOKIES_SECURE : True/False whether or not you want to require HTTPS when sending cookies. The development environment uses False . Defaults to True . CORS_ORIGINS : A comma-separated string of origins to allow with CORS. For example, your development environment should be set to something like http://localhost:8080 depending on which port the GUI is served from. DATABASE_URL : The connection string used to connect to the PostgreSQL server. It should be in the form of postgresql://user:password@hostname[:port]/dbname . JWT_ACCESS_EXPIRE_SECONDS : The number of seconds after which an access token will expire. The development environment uses 900 (15 minutes) by default. JWT_ALGORITHM : Sets the algorithm to use for signing the tokens. The development environment uses HS256 by default. JWT_REFRESH_EXPIRE_SECONDS : The number of seconds after which a refresh token will expire. The development environment uses 43200 (12 hours) by default. JWT_SECRET : The secret key/password to use when signing and decoding tokens. The development environment generates a random 32 character string .","title":"FastAPI backend variables"},{"location":"development/backend/environment_variables/#postgresql-container-variables","text":"These variables are used by the PostgreSQL server container to initialize the database. POSTGRES_DB : The name of the database to create. The development environment uses ace . POSTGRES_USER : The user to use to connect to the PostgreSQL server. The development environment uses ace . POSTGRES_PASSWORD : The password to use to connect to the PostgreSQL server. The development environment generates a random 32 character string .","title":"PostgreSQL container variables"}]}